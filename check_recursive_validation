#!/usr/bin/perl

# Copyright (c) 2015, Verisign, Inc.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# * Neither the name of check_recursive_validation nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# usage
#
# define command {
#   command_name    check-recursive-validation
#   command_line    /usr/local/libexec/nagios-local/check_recursive_validation -H $HOSTADDRESS$
# }
# 
# define service {
#   name		dns-recursive-validation
#   check_command	check-recursive-validation
#   ...
# }
# 
# define service {
#   use dns-recursive-validation
#   host_name 127.0.0.1
# }

use warnings;
use strict;

use Getopt::Std;
use Net::DNS::Resolver;
use Time::HiRes qw ( gettimeofday tv_interval);

my $start;
my $stop;
my %opts = (H=> '127.0.0.1', t=>30, T=>'DNSKEY', Z=>'.');

sub usage {
	print STDERR "usage: $0 -d -H host -Z zone -T type -t timeout\n";
	print STDERR "\t-d 		debug\n";
	print STDERR "\t-H host		host to query, defaults to 127.0.0.1\n";
	print STDERR "\t-Z zone		zone to query, defaults to .\n";
	print STDERR "\t-T type		query type, defaults to DNSKEY\n";
	print STDERR "\t-t seconds	timeout on DNS queries\n";
	exit 3;
}

getopts('hH:Z:dt:T:', \%opts) || usage();
usage() unless $opts{Z};
usage() if $opts{h};

sub output {
	my $state = shift;
	my $msg = shift;
	$stop = [gettimeofday()] unless $stop;
	my $latency = tv_interval($start, $stop);
	printf "%s: %s; (%.2fs) |time=%.6fs;;;0.000000\n",
		$state,
		$msg,
		$latency,
		$latency;
}

sub success {
	output('OK', shift);
	exit(0);
}

sub warning {
	output('WARNING', shift);
	exit(1);
}

sub critical {
	output('CRITICAL', shift);
	exit(2);
}

$start = [gettimeofday()];

# set up the resolver
#
my $res = new Net::DNS::Resolver;
$res->nameserver($opts{H});
$res->udp_timeout($opts{t});
$res->recurse(1);

# try "normal" query first
#
$res->dnssec(1);
$res->adflag(1);
my $pkt = $res->send($opts{Z}, $opts{T});
warning($res->errorstring) unless ($pkt);	# timeout
success($opts{H} . " returned a validated " . $opts{Z} . "/" . $opts{T} . " response") if 'NOERROR' eq $pkt->header->rcode && $pkt->header->ad;
success($opts{H} . " returned an unvalidated " . $opts{Z} . "/" . $opts{T} . " response") if 'NOERROR' eq $pkt->header->rcode;

# Here RCODE is not NOERROR.  If its also not SERVFAIL then bail early
#
critical($opts{H} . " returned unexpected " . $pkt->header->rcode . " " . $opts{Z} . "/" . $opts{T} . " response") unless 'SERVFAIL' eq $pkt->header->rcode;

#
# either zone is failing all resoultion, or its a dnssec problem
# if failing due to dnssec a CD=1 query should return success
#
$res->dnssec(1);
$res->adflag(0);
$res->cdflag(1);
$pkt = $res->send($opts{Z}, $opts{T});
warning($res->errorstring) unless ($pkt);	# timeout
critical($opts{Z} . "/" . $opts{T} . " seems to be incorrectly signed") if 'NOERROR' eq $pkt->header->rcode;
warning($opts{H} . " cannot communicate with " . $opts{Z} . " name servers");
